import type {
  OpenAPIClient,
  Parameters,
  UnknownParamsObject,
  OperationResponse,
  AxiosRequestConfig,
} from 'openapi-client-axios';

declare namespace Components {
    namespace Schemas {
        export interface ErrorResponse {
            /**
             * Example: "Prompt ID is required."
             */
            error: string;
        }
        export interface Evaluation {
            id: string;
            evaluationGroupId: string;
            /**
             * The messages to append to the completion messages when running the evaluation.
             */
            appendedMessages: {
                /**
                 * Example: "Hello, {{city}}!"
                 */
                content: string | null;
                role: "USER" | "ASSISTANT" | "SYSTEM" | "TOOL";
                /**
                 * Example: "TOOL_CALL_1"
                 */
                toolCallId: string | null;
                toolCalls: {
                    /**
                     * TOOL_CALL_1
                     */
                    toolCallId: string;
                    /**
                     * The type of the tool. Currently, only `function` is supported.
                     */
                    type: "function";
                    function: {
                        /**
                         * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                         */
                        arguments: string;
                        /**
                         * The name of the function to call.
                         */
                        name: string;
                    };
                }[] | null;
            }[];
            /**
             * The variables to in the prompt when evaluating the prompt.
             */
            variables: {
                [name: string]: null;
            };
            /**
             * The target to evaluate the response against.
             */
            target: string;
        }
        export interface EvaluationBody {
            evaluationGroupId: string;
            /**
             * The messages to append to the completion messages when running the evaluation.
             */
            appendedMessages: {
                /**
                 * Example: "Hello, {{city}}!"
                 */
                content: string | null;
                role: "USER" | "ASSISTANT" | "SYSTEM" | "TOOL";
                /**
                 * Example: "TOOL_CALL_1"
                 */
                toolCallId: string | null;
                toolCalls: {
                    /**
                     * TOOL_CALL_1
                     */
                    toolCallId: string;
                    /**
                     * The type of the tool. Currently, only `function` is supported.
                     */
                    type: "function";
                    function: {
                        /**
                         * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                         */
                        arguments: string;
                        /**
                         * The name of the function to call.
                         */
                        name: string;
                    };
                }[] | null;
            }[];
            /**
             * The variables to in the prompt when evaluating the prompt.
             */
            variables: {
                [name: string]: null;
            };
            /**
             * The target to evaluate the response against.
             */
            target: string;
        }
        export interface EvaluationGroup {
            id: string;
            name: string;
            description: string;
            promptId: string;
            matcher: {
                /**
                 * The type of evaluation matcher to use.
                 */
                type: "CONTAINS" | "EQUALS" | "JSON";
                /**
                 * A JSON path to use when matching the response. Only required when type is `jsonPath`.
                 */
                jsonPath: string | null;
            };
        }
        export interface EvaluationGroupBody {
            name: string;
            description: string;
            promptId: string;
            matcher: {
                /**
                 * The type of evaluation matcher to use.
                 */
                type: "CONTAINS" | "EQUALS" | "JSON";
                /**
                 * A JSON path to use when matching the response. Only required when type is `jsonPath`.
                 */
                jsonPath: string | null;
            };
        }
        export interface PromptBody {
            name: string;
            tools: {
                toolId: string;
            }[];
            messages: {
                /**
                 * Example: "Hello, {{city}}!"
                 */
                content: string | null;
                role: "USER" | "ASSISTANT" | "SYSTEM" | "TOOL";
                /**
                 * Example: "TOOL_CALL_1"
                 */
                toolCallId: string | null;
                toolCalls: {
                    /**
                     * TOOL_CALL_1
                     */
                    toolCallId: string;
                    /**
                     * The type of the tool. Currently, only `function` is supported.
                     */
                    type: "function";
                    function: {
                        /**
                         * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                         */
                        arguments: string;
                        /**
                         * The name of the function to call.
                         */
                        name: string;
                    };
                }[] | null;
            }[];
            parameters: {
                /**
                 * Example: "gpt-3.5-turbo"
                 */
                modelName: string;
                /**
                 * Example: PromptResponseFormat.TEXT
                 */
                responseFormat: "TEXT" | "JSON";
                /**
                 * Example: 1
                 */
                temperature: number;
                /**
                 * Example: 1
                 */
                topP: number;
                /**
                 * Example: 0
                 */
                frequencyPenalty: number;
                /**
                 * Example: 0
                 */
                presencePenalty: number;
                /**
                 * Example: 100
                 */
                maxTokens: number | null;
                /**
                 * Example: 97946543
                 */
                seed: number | null;
                /**
                 * Example: "checkWeather"
                 */
                toolChoice: string | null;
            };
        }
        export interface PromptConfiguration {
            /**
             * Example: "PROMPT_1"
             */
            id: string;
            /**
             * Example: "Check the weather"
             */
            name: string;
            parameters: {
                /**
                 * Example: "gpt-3.5-turbo"
                 */
                modelName: string;
                /**
                 * Example: PromptResponseFormat.TEXT
                 */
                responseFormat: "TEXT" | "JSON";
                /**
                 * Example: 1
                 */
                temperature: number;
                /**
                 * Example: 1
                 */
                topP: number;
                /**
                 * Example: 0
                 */
                frequencyPenalty: number;
                /**
                 * Example: 0
                 */
                presencePenalty: number;
                /**
                 * Example: 100
                 */
                maxTokens: number | null;
                /**
                 * Example: 97946543
                 */
                seed: number | null;
                /**
                 * Example: "checkWeather"
                 */
                toolChoice: string | null;
            };
            messages: {
                /**
                 * Example: "Hello, {{city}}!"
                 */
                content: string | null;
                role: "USER" | "ASSISTANT" | "SYSTEM" | "TOOL";
                /**
                 * Example: "TOOL_CALL_1"
                 */
                toolCallId: string | null;
                toolCalls: {
                    /**
                     * TOOL_CALL_1
                     */
                    toolCallId: string;
                    /**
                     * The type of the tool. Currently, only `function` is supported.
                     */
                    type: "function";
                    function: {
                        /**
                         * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                         */
                        arguments: string;
                        /**
                         * The name of the function to call.
                         */
                        name: string;
                    };
                }[] | null;
            }[];
            tools: {
                /**
                 * The initial messages to be included with your call to the LLM API.
                 */
                id: string;
                /**
                 * The name of the tool to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                 */
                name: string; // ^[a-zA-Z0-9_-]{1,64}$
                /**
                 * A description of what the tool does, used by the model to choose when and how to call the tool.
                 */
                description: string;
                /**
                 * The parameters the functions accepts, described as a JSON Schema object. This schema is designed to match the TypeScript Record<string, unknown>, allowing for any properties with values of any type.
                 */
                parameters: {
                    [name: string]: null;
                };
            }[];
        }
        /**
         * The initial messages to be included with your call to the LLM API.
         */
        export interface PromptMessage {
            /**
             * Example: "Hello, {{city}}!"
             */
            content: string | null;
            role: "USER" | "ASSISTANT" | "SYSTEM" | "TOOL";
            /**
             * Example: "TOOL_CALL_1"
             */
            toolCallId: string | null;
            toolCalls: {
                /**
                 * TOOL_CALL_1
                 */
                toolCallId: string;
                /**
                 * The type of the tool. Currently, only `function` is supported.
                 */
                type: "function";
                function: {
                    /**
                     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                     */
                    arguments: string;
                    /**
                     * The name of the function to call.
                     */
                    name: string;
                };
            }[] | null;
        }
        export interface Tool {
            /**
             * The initial messages to be included with your call to the LLM API.
             */
            id: string;
            /**
             * The name of the tool to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
             */
            name: string; // ^[a-zA-Z0-9_-]{1,64}$
            /**
             * A description of what the tool does, used by the model to choose when and how to call the tool.
             */
            description: string;
            /**
             * The parameters the functions accepts, described as a JSON Schema object. This schema is designed to match the TypeScript Record<string, unknown>, allowing for any properties with values of any type.
             */
            parameters: {
                [name: string]: null;
            };
        }
        export interface ToolBody {
            /**
             * The name of the tool to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
             */
            name: string; // ^[a-zA-Z0-9_-]{1,64}$
            /**
             * A description of what the tool does, used by the model to choose when and how to call the tool.
             */
            description: string;
            /**
             * The parameters the functions accepts, described as a JSON Schema object. This schema is designed to match the TypeScript Record<string, unknown>, allowing for any properties with values of any type.
             */
            parameters: {
                [name: string]: null;
            };
        }
        export interface ToolFunctionCall {
            /**
             * TOOL_CALL_1
             */
            toolCallId: string;
            /**
             * The type of the tool. Currently, only `function` is supported.
             */
            type: "function";
            function: {
                /**
                 * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                 */
                arguments: string;
                /**
                 * The name of the function to call.
                 */
                name: string;
            };
        }
        /**
         * The parameters the functions accepts, described as a JSON Schema object. This schema is designed to match the TypeScript Record<string, unknown>, allowing for any properties with values of any type.
         */
        export interface ToolParameters {
            [name: string]: null;
        }
    }
}
declare namespace Paths {
    namespace CreateEvaluation {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        export type RequestBody = Components.Schemas.EvaluationBody;
        namespace Responses {
            export type $201 = Components.Schemas.Evaluation;
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace CreateEvaluationGroup {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        export type RequestBody = Components.Schemas.EvaluationGroupBody;
        namespace Responses {
            export type $201 = Components.Schemas.EvaluationGroup;
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace CreatePrompt {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        export type RequestBody = Components.Schemas.PromptBody;
        namespace Responses {
            export type $201 = Components.Schemas.PromptConfiguration;
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace CreateTool {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        export type RequestBody = Components.Schemas.ToolBody;
        namespace Responses {
            export type $201 = Components.Schemas.Tool;
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace GetEvaluationGroups {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        namespace Responses {
            export type $200 = Components.Schemas.EvaluationGroup[];
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace GetEvaluations {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        namespace Responses {
            export type $200 = Components.Schemas.Evaluation[];
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace GetTools {
        export interface HeaderParameters {
            "X-API-KEY": Parameters.XAPIKEY;
        }
        namespace Parameters {
            export type XAPIKEY = string;
        }
        namespace Responses {
            export type $200 = Components.Schemas.Tool[];
            export type $401 = Components.Schemas.ErrorResponse;
            export type $403 = Components.Schemas.ErrorResponse;
            export type $500 = Components.Schemas.ErrorResponse;
        }
    }
    namespace SdkV1EvaluationGroups$EvaluationGroupId {
        namespace Delete {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationGroupId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationGroupId: Parameters.EvaluationGroupId;
            }
            namespace Responses {
                export interface $200 {
                    success?: boolean;
                }
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export interface $404 {
                    error?: string;
                }
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Get {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationGroupId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationGroupId: Parameters.EvaluationGroupId;
            }
            namespace Responses {
                export type $200 = Components.Schemas.EvaluationGroup;
                export type $400 = Components.Schemas.ErrorResponse;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $404 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Put {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationGroupId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationGroupId: Parameters.EvaluationGroupId;
            }
            export type RequestBody = Components.Schemas.EvaluationGroupBody;
            namespace Responses {
                export type $200 = Components.Schemas.EvaluationGroup;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
    }
    namespace SdkV1Evaluations$EvaluationId {
        namespace Delete {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationId: Parameters.EvaluationId;
            }
            namespace Responses {
                export interface $200 {
                    success?: boolean;
                }
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export interface $404 {
                    error?: string;
                }
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Get {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationId: Parameters.EvaluationId;
            }
            namespace Responses {
                export type $200 = Components.Schemas.Evaluation;
                export type $400 = Components.Schemas.ErrorResponse;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $404 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Put {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type EvaluationId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                evaluationId: Parameters.EvaluationId;
            }
            export type RequestBody = Components.Schemas.EvaluationBody;
            namespace Responses {
                export type $200 = Components.Schemas.Evaluation;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
    }
    namespace SdkV1Prompts$PromptId {
        namespace Delete {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type PromptId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                promptId: Parameters.PromptId;
            }
            namespace Responses {
                export interface $200 {
                    success?: boolean;
                }
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export interface $404 {
                    error?: string;
                }
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Get {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type PromptId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                promptId: Parameters.PromptId;
            }
            namespace Responses {
                export type $200 = Components.Schemas.PromptConfiguration;
                export type $400 = Components.Schemas.ErrorResponse;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $404 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Put {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type PromptId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                promptId: Parameters.PromptId;
            }
            export type RequestBody = Components.Schemas.PromptBody;
            namespace Responses {
                export type $200 = Components.Schemas.PromptConfiguration;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
    }
    namespace SdkV1Tools$ToolId {
        namespace Delete {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type ToolId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                toolId: Parameters.ToolId;
            }
            namespace Responses {
                export interface $200 {
                    success?: boolean;
                }
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export interface $404 {
                    error?: string;
                }
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Get {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type ToolId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                toolId: Parameters.ToolId;
            }
            namespace Responses {
                export type $200 = Components.Schemas.Tool;
                export type $400 = Components.Schemas.ErrorResponse;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $404 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
        namespace Put {
            export interface HeaderParameters {
                "X-API-KEY": Parameters.XAPIKEY;
            }
            namespace Parameters {
                export type ToolId = string;
                export type XAPIKEY = string;
            }
            export interface PathParameters {
                toolId: Parameters.ToolId;
            }
            export type RequestBody = Components.Schemas.ToolBody;
            namespace Responses {
                export type $200 = Components.Schemas.Tool;
                export type $401 = Components.Schemas.ErrorResponse;
                export type $403 = Components.Schemas.ErrorResponse;
                export type $500 = Components.Schemas.ErrorResponse;
            }
        }
    }
}

export interface OperationMethods {
  /**
   * createPrompt - Creates and deploys a new prompt
   */
  'createPrompt'(
    parameters?: Parameters<Paths.CreatePrompt.HeaderParameters> | null,
    data?: Paths.CreatePrompt.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreatePrompt.Responses.$201>
  /**
   * getTools - Get all tools
   */
  'getTools'(
    parameters?: Parameters<Paths.GetTools.HeaderParameters> | null,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetTools.Responses.$200>
  /**
   * createTool - Creates a new tool function
   */
  'createTool'(
    parameters?: Parameters<Paths.CreateTool.HeaderParameters> | null,
    data?: Paths.CreateTool.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreateTool.Responses.$201>
  /**
   * getEvaluationGroups - Get all Evaluation Groups
   */
  'getEvaluationGroups'(
    parameters?: Parameters<Paths.GetEvaluationGroups.HeaderParameters> | null,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetEvaluationGroups.Responses.$200>
  /**
   * createEvaluationGroup - Creates a new evaluationGroup function
   */
  'createEvaluationGroup'(
    parameters?: Parameters<Paths.CreateEvaluationGroup.HeaderParameters> | null,
    data?: Paths.CreateEvaluationGroup.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreateEvaluationGroup.Responses.$201>
  /**
   * getEvaluations - Get all Evaluation Groups
   */
  'getEvaluations'(
    parameters?: Parameters<Paths.GetEvaluations.HeaderParameters> | null,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetEvaluations.Responses.$200>
  /**
   * createEvaluation - Creates a new evaluation function
   */
  'createEvaluation'(
    parameters?: Parameters<Paths.CreateEvaluation.HeaderParameters> | null,
    data?: Paths.CreateEvaluation.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreateEvaluation.Responses.$201>
}

export interface PathsDictionary {
  ['/sdk/v1/prompts/{promptId}']: {
  }
  ['/sdk/v1/prompts']: {
    /**
     * createPrompt - Creates and deploys a new prompt
     */
    'post'(
      parameters?: Parameters<Paths.CreatePrompt.HeaderParameters> | null,
      data?: Paths.CreatePrompt.RequestBody,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.CreatePrompt.Responses.$201>
  }
  ['/sdk/v1/tools']: {
    /**
     * createTool - Creates a new tool function
     */
    'post'(
      parameters?: Parameters<Paths.CreateTool.HeaderParameters> | null,
      data?: Paths.CreateTool.RequestBody,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.CreateTool.Responses.$201>
    /**
     * getTools - Get all tools
     */
    'get'(
      parameters?: Parameters<Paths.GetTools.HeaderParameters> | null,
      data?: any,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.GetTools.Responses.$200>
  }
  ['/sdk/v1/tools/{toolId}']: {
  }
  ['/sdk/v1/evaluation-groups']: {
    /**
     * createEvaluationGroup - Creates a new evaluationGroup function
     */
    'post'(
      parameters?: Parameters<Paths.CreateEvaluationGroup.HeaderParameters> | null,
      data?: Paths.CreateEvaluationGroup.RequestBody,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.CreateEvaluationGroup.Responses.$201>
    /**
     * getEvaluationGroups - Get all Evaluation Groups
     */
    'get'(
      parameters?: Parameters<Paths.GetEvaluationGroups.HeaderParameters> | null,
      data?: any,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.GetEvaluationGroups.Responses.$200>
  }
  ['/sdk/v1/evaluation-groups/{evaluationGroupId}']: {
  }
  ['/sdk/v1/evaluations']: {
    /**
     * createEvaluation - Creates a new evaluation function
     */
    'post'(
      parameters?: Parameters<Paths.CreateEvaluation.HeaderParameters> | null,
      data?: Paths.CreateEvaluation.RequestBody,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.CreateEvaluation.Responses.$201>
    /**
     * getEvaluations - Get all Evaluation Groups
     */
    'get'(
      parameters?: Parameters<Paths.GetEvaluations.HeaderParameters> | null,
      data?: any,
      config?: AxiosRequestConfig  
    ): OperationResponse<Paths.GetEvaluations.Responses.$200>
  }
  ['/sdk/v1/evaluations/{evaluationId}']: {
  }
}

export type Client = OpenAPIClient<OperationMethods, PathsDictionary>
